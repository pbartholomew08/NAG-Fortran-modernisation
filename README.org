#+TITLE: NAG Fortran Modernisation Workshop
#+AUTHOR: Paul Bartholomew

#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \hypersetup{colorlinks}

* Introduction

** Good practice - code structure

- Modularise code
- Write code so that it can be tested
- Use ~implicit none~ - all variables have to be /explicitly defined/
- Use whitespace to make your code readable for others and for yourself
- Use /consistent/ formatting
- Agree on a formatting standard for your team so that you can read each other's code in a
  consistent manner

*** Coding style suggestions 

These are suggestions, not rules, to think about

- Use lower case (mostly)
- Capitalise first character of subroutines and functions, use spaces around arguments
- Lower case arrays, no spaces around indices (enables visual differentiation of function calls and
  arrays)
- Use square brackets to define arrays and use a digit on each side of the decimal point /i.e./
#+BEGIN_SRC f90
  A = [ 0.0 1.0 2.0 ]
#+END_SRC
- Use spaces around mathematical operators
- *Remember that Fortran is column-major* for memory access
- Capitalise names of constants /i.e./
#+BEGIN_SRC f90
  integer, parameter :: MAX_CELLS = 1000
#+END_SRC
- Comment beginning of files with
  - purpose of code. Include LaTeX code of equation
  - 
- Use names that are meaningful to your scientific discipline
- For functions/procedures use verbs /e.g./ ~get_index(a, 1)~
- In functions and subroutines use the ~intent~ keyword
- If using subroutines from third-party libraries, capitalise the name /e.g./ ~MPI_INIT(ierr)~
- =Fortran= *does not short-circuit* ~if~ statements so
#+BEGIN_SRC f90
  if (size(vec) == 10 .and. vec(10) > eps) then
     !! Do something
  endif
#+END_SRC
should be written as
#+BEGIN_SRC f90
  if (size(vec) == 10) then
     if (vec(10) > eps) then
        !! Do something
     endif
  endif
#+END_SRC
to prevent potential =segfaults= if ~vec~ is smaller than 10.
- Indicate array operations using brackets and colons /e.g./ ~a(:) = b(:) + c(:)~ rather than ~a = b + c~
- Array operations are more likely to be vectorised than their loop equivalents
- Look into array masking, this allows you to apply array operation only where the values in the
  array meet some condition
- ~block~ statements can be used as a modern version of ~goto~'s

*** Gauss-Seidel method                                           :example:

Can be written in both ~loop~ and array versions

** Fortran modules

=Fortran= modules allow type checking for function/subroutine arguments at compile time.
You can rename entities from modules:
#+BEGIN_SRC f90
    use module_mod, solve_system => solve_linear_system
#+END_SRC
to prevent name clashes for example.
Modules also allow us to implement basic polymorphism by defining an ~interface~ to type-specialised
subroutines.

*** Submodules

These are introduced by =Fortran 2008=, supported by =ifort >v16= and =gfortran >v6=, this allows you to
separate the /implementation/ from the /interface/ and can allow more efficient compilation.
The =module= defines the /interface/ whilst the =submodule= contains the /implementation/, thus a change of
implementation only requires compilation of the submodule followed by re-linking of object files.


** Fortran loops

- Always use =do= loops with fixed bounds, without ~cycle~ or ~exit~ statements which could prevent
  vectorisation
- Avoid branching in loops!
- Avoid =do while= loops
- ~forall~ (obsoleted in =Fortran 2018=) and ~do concurrent~ (=Fortran 2008=?) allow us to tell the compiler
  that there are no data dependencies - easier for compiler to optimise
  - ~do concurrent~ allows for masking
  - ~do concurrent~ allows variables to be declared ~local~ for example, similar to =openMP=, with aim of
    improving performance

** IEEE floating point arithmetic

=Fortran 2003= provides ways to check for =IEEE= exceptions in code (although can also use
~-ffpe-trap=all~ or equivalent on compile flags).

** API design

- Should provide a high-level description of the behaviour of the code
- Provides the building blocks of an application
- Has a long life - requires careful design
- Should be easy to use, difficult to misuse - always use ~intent~ keyword

*** Optional arguments

Allows extending =API= without requiring changes to existing code.

*** Pure procedures

Allows you to indicate that a procedure does not have side-effects, /i.e./ does not change values of
arguments.

*** Elemental procedures

Can be applied to scalar /or/ array arguments, have the same properties as ~pure~ procedures.
In particular this allows for vectorising operations on arrays.

** GNU Makefile

By specifying code dependencies, only recompile code whose dependencies have changed.

** Code documentation

#+BEGIN_QUOTE
Code documentation is important and part of the code.
#+END_QUOTE

Code documentation includes both the code comments and should also include external documentation
such as user guide, installation guide listing dependencies.

* Exercise day 1

Day 1 exercise is modernising the =Fortran77= code =fd1d_heat_explicit.f90=.

#+BEGIN_SRC f90 :tangle src/types_mod.f90
  module types_mod
    use, intrinsic :: iso_fortran_env

    implicit none

    !! Everything is private unless otherwise stated
    private
    public :: SP, DP, SI, DI

    integer, parameter :: SP = REAL32
    integer, parameter :: DP = REAL64
    integer, parameter :: SI = INT32
    integer, parameter :: DI = INT64

  contains

  end module types_mod
#+END_SRC

** Step 13

#+BEGIN_SRC f90 :tangle src/rhs_mod.f90
  module rhs_mod

    use types_mod

    implicit none

    !! Make everything private
    private
    public :: func

  contains

    function func(j, x) result (d)
      implicit none

      !! Inputs
      integer, intent(in) :: j
      real (kind=dp), intent(in) :: x(:)

      !! Outputs
      real (kind=dp) :: d

      d = 0.0e+00_dp
    end function

  end module rhs_mod
#+END_SRC

** Step 14

#+BEGIN_SRC f90 :tangle src/cfl_mod.f90
  module cfl_mod

    use types_mod
  
    implicit none

    !! Private by default
    private
    public :: fd1d_heat_explicit_cfl

  contains

    subroutine fd1d_heat_explicit_cfl(k, t_num, t_min, t_max, x_num, x_min, &
      x_max, cfl)

      implicit none

      !! Inputs
      real (kind=dp), intent(in) :: k
      integer, intent(in) :: t_num
      integer, intent(in) :: x_num
      real (kind=dp), intent(in) :: t_max
      real (kind=dp), intent(in) :: t_min
      real (kind=dp), intent(in) :: x_max
      real (kind=dp), intent(in) :: x_min

      !! Outputs
      real (kind=dp), intent(out) :: cfl

      !! Locals
      real (kind=dp) :: dx
      real (kind=dp) :: dt

      dx = (x_max-x_min)/real(x_num-1, kind=dp)
      dt = (t_max-t_min)/real(t_num-1, kind=dp)

      cfl = k*dt/dx/dx

      write (*, '(a)') ' '
      write (*, '(a,g14.6)') '  CFL stability criterion value = ', cfl

    end subroutine

  end module cfl_mod
#+END_SRC

** Step 15

#+BEGIN_SRC f90 :tangle src/io_mod.f90
  module io_mod

    use types_mod

    implicit none

    !! Private by default
    private
    public :: r8mat_write, r8vec_linspace, r8vec_write

  contains

    subroutine r8mat_write(output_filename, table)
      implicit none

      !! Input
      character (len=*), intent(in) :: output_filename
      real (kind=dp), intent(in) :: table(:,:)

      !! Output
      !! InOut

      !! Locals
      integer :: output_unit_id
      character (len=30) :: string
      integer :: j
      integer :: m
      integer :: n

      m = size(table(:,:), 1)
      n = size(table(:,:), 2)

      output_unit_id = 10
      open (unit=output_unit_id, file=output_filename, status='replace')

      write (string, '(a1,i8,a1,i8,a1,i8,a1)') '(', m, 'g', 24, '.', 16, ')'

      do j = 1, n
        write (output_unit_id, string) table(1:m, j)
      end do

      close (unit=output_unit_id)
    end subroutine

    subroutine r8vec_linspace(a_first, a_last, a)

      implicit none

      !! Input
      real (kind=dp), intent(in) :: a_first
      real (kind=dp), intent(in) :: a_last

      !! Output
      real (kind=dp), intent(out) :: a(:)

      !! Local
      integer :: i
      integer :: n

      n = size(a(:))

      do i = 1, n
        a(i) = (real(n-i,kind=dp)*a_first+real(i-1,kind=dp)*a_last)/ &
          real(n-1, kind=dp)
      end do

    end subroutine

    subroutine r8vec_write(output_filename, x)

      implicit none

      !! Input
      real (kind=dp), intent(in) :: x(:)
      character (len=*), intent(in) :: output_filename

      !! Local
      integer :: j
      integer :: m
      integer :: n
      integer :: output_unit_id

      n = size(x(:))

      output_unit_id = 11
      open (unit=output_unit_id, file=output_filename, status='replace')

      do j = 1, n
        write (output_unit_id, '(2x,g24.16)') x(j)
      end do

      close (unit=output_unit_id)
    end subroutine

  end module io_mod
#+END_SRC

** Step 16

#+BEGIN_SRC f90 :tangle src/solver_mod.f90
  module solver_mod

    use types_mod, only : dp
    use rhs_mod, only : func

    !! Private by default
    private
    public :: fd1d_heat_explicit

  contains

    subroutine fd1d_heat_explicit(x, t, dt, cfl, h, h_new)
      implicit none

      !! Inputs
      real (kind=dp), intent(in) :: h(:)
      real (kind=dp), intent(in) :: dt
      real (kind=dp), intent(in) :: cfl
      real (kind=dp), intent(in) :: t

      !! Outputs
      real (kind=dp), intent(out) :: h_new(:)
      real (kind=dp), intent(out) :: x(:)

      !! Locals
      real (kind=dp) :: f(size(x))
      integer :: j

      do j = 1, size(x)
        f(j) = func(j, x)
      end do

      h_new(1) = 0.0e+00_dp

      do j = 2, size(h_new) - 1
        h_new(j) = h(j) + dt*f(j) + cfl*(h(j-1)-2.0e+00_dp*h(j)+h(j+1))
      end do

  ! set the boundary conditions again
      h_new(1) = 90.0e+00_dp
      h_new(size(h_new)) = 70.0e+00_dp
    end subroutine fd1d_heat_explicit

  end module solver_mod
#+END_SRC
* Day 2 

** Agenda
- Serial NetCDF and HDF5
- Using pFUnit
- PLplot
- Introduction to parallelisation

** Data from simulations

Data is stored for two reasons: checkpoint/restart and visulisation and analysis.
When using data for visualisation /consider using single precision/.

Data management is difficult due to the large amount of it and difficulties sharing due to lack of
metadata[fn:metadata] - using a self-describing format such as =NetCDF= or =HDF5= can help to resolve
this.

[fn:metadata] /i.e./ how to read it.

*** NetCDF

- Stores data in multidimensional arrays
- Optimised (non-sequential) access
- Can store metadata
- Applies data compression

*** HDF5

- Similar to =NetCDF=
  - 
- /More/ complicated than =NetCDF=

**** Data model

- *File* contains all groups and datasets
- *Datasets* multi-dimensional array data

*** Testing code

Available tools for =Fortran=

- The compiler
- =FORCHECK= not free!
- =FPT= 
- =gcov= 
- =Valgrind=
- =camfort=
- =pFUnit= a unit testing framework

*** In-memory visualisation with PLplot

- Can quickly produce publication quality graphs
- Can provide quick visualisation/testing while running
  - Easy to determine failing run and kill/save CPU cycles
- Not intended to compete with e.g. =GNUPlot= or =Matplotlib=

*** Parallel I/O using NetCDF and HDF5

Parallel =HDF5= is build upon =MPI-IO= whilst parallel =NetCDF= is built upon parallel =HDF5=.

* Exercise day 2

The first few steps are related to producing a =makefile= to build the application that was modernised
yesterday.

* Supplementary information

Supplementary information is available at:
[[https://www.nag.co.uk/content/fortran-modernization-workshop]].
